{
//  generate = [token-accessors="yes"]

  parserClass="org.kdb.inside.brains.parser.QParser"

  extends="org.kdb.inside.brains.psi.impl.QPsiElementImpl"
  implements="org.kdb.inside.brains.psi.QPsiElement"

  psiClassPrefix="Q"
  psiImplClassSuffix="Impl"
  psiPackage="org.kdb.inside.brains.psi"
  psiImplPackage="org.kdb.inside.brains.psi.impl"

  tokenTypeClass="org.kdb.inside.brains.psi.QTokenType"
  elementTypeClass="org.kdb.inside.brains.psi.QElementType"
  elementTypeHolderClass="org.kdb.inside.brains.psi.QTypes"

  rightAssociative=true

  extends("var_reference|.*expr")=expression
  consumeTokenMethod="consumeTokenFast"

  tokens=[
    NILL="(::)"
    COLON=':'
    SEMICOLON=';'
    BRACKET_OPEN='['
    BRACKET_CLOSE=']'
    BRACE_OPEN='{'
    BRACE_CLOSE='}'
    PAREN_OPEN='('
    PAREN_CLOSE=')'

    NEW_LINE="\r\n"

    COMMAND_IMPORT="import command"
    COMMAND_CONTEXT="context command"
    COMMAND_SYSTEM="system command"
    COMMAND_ARGUMENTS="command arguments"

    FUNCTION_IMPORT="import function"

    TYPE_CAST_PATTERN="type cast pattern"

    ITERATOR="iterator"

    OPERATOR_CUT="_"
    OPERATOR_APPLY="."
    OPERATOR_ORDER="order"
    OPERATOR_EQUALITY="equality"
    OPERATOR_ARITHMETIC="arithmetic"
    OPERATOR_WEIGHT="weight"
    OPERATOR_COMMA="comma"
    OPERATOR_OTHERS="others"

    MODE_PATTERN="mode"
    SYMBOL_PATTERN="symbol"
    VARIABLE_PATTERN="variable"
    FILE_PATH_PATTERN="string path"
    SYMBOL_PATH_PATTERN="symbol path"

    UNARY_FUNCTION="unary"
    BINARY_FUNCTION="binary"
    COMPLEX_FUNCTION="complex"
    INTERNAL_FUNCTION="internal"

    QUERY_BY="by"
    QUERY_TYPE="type"
    QUERY_FROM="from"
    QUERY_WHERE="where"
    QUERY_SPLITTER="splitter"

    VECTOR="vector"

    SIGNED_ATOM="signed atom"
    UNSIGNED_ATOM="unsigned atom"

    CHAR="char"
    STRING="string"

    CONTROL_KEYWORD="control"
    CONDITION_KEYWORD="condition"

    LINE_COMMENT='line comment'
    BLOCK_COMMENT='block comment'
  ]
}

root ::= top*

private top ::= context | top_in_context
private top_in_context ::= import_command | command | expression | separator | mode

private end_of_line_recover ::= !(NEW_LINE)
private parens_recover ::= !(PAREN_OPEN | PAREN_CLOSE)
private braces_recover ::= !(BRACE_OPEN | BRACE_CLOSE)
private brackets_recover ::= !(BRACKET_OPEN | BRACKET_CLOSE)

private separator ::= SEMICOLON | NEW_LINE

private statement ::= SEMICOLON | expression SEMICOLON?

// Context: \d ...
context_body ::= top_in_context*
context ::= COMMAND_CONTEXT var_declaration? (NEW_LINE context_body)? {
 pin(".*") = 1
 mixin = "org.kdb.inside.brains.psi.impl.QPsiContextImpl"
 methods = [variable="var_declaration"]
 }

// command - anything with \...
command ::= COMMAND_SYSTEM command_params? { pin = 1 methods = [command="COMMAND_SYSTEM" parameters="COMMAND_ARGUMENTS"] }
private command_params ::= COMMAND_ARGUMENTS {recoverWhile = end_of_line_recover}

import_command ::= COMMAND_IMPORT import_command_file { pin = 1 implements="org.kdb.inside.brains.psi.QImport" }
private import_command_file ::= FILE_PATH_PATTERN {recoverWhile = end_of_line_recover }

import_function ::= FUNCTION_IMPORT expression { pin = 1 extends=expression implements="org.kdb.inside.brains.psi.QImport" }

// In mode we can't use line_break as a separator
private mode_content ::= statement+ { recoverWhile = end_of_line_recover }
mode ::= MODE_PATTERN mode_content? { pin = 1 methods=[modeName="MODE_PATTERN"] } // Mode: [a-Z]) .....

// ============ Custom types ====================
symbol ::= SYMBOL_PATTERN {
 implements=["org.kdb.inside.brains.psi.QPsiElement" "com.intellij.psi.PsiNameIdentifierOwner" "com.intellij.psi.PsiQualifiedNamedElement" "com.intellij.psi.NavigatablePsiElement"]
 mixin="org.kdb.inside.brains.psi.impl.QSymbolElementImpl"
}
symbols ::= symbol symbol+

var_reference ::= VARIABLE_PATTERN {
 implements="org.kdb.inside.brains.psi.QVariable"
 mixin="org.kdb.inside.brains.psi.impl.QVariableReferenceImpl"
}

var_declaration ::= VARIABLE_PATTERN {
 implements=["org.kdb.inside.brains.psi.QVariable" "com.intellij.psi.PsiNameIdentifierOwner" "com.intellij.psi.PsiQualifiedNamedElement" "com.intellij.psi.NavigatablePsiElement"]
 mixin="org.kdb.inside.brains.psi.impl.QVariableDeclarationImpl"
}

iterator_type ::= ITERATOR
operator_type ::= OPERATOR_CUT | OPERATOR_ORDER | OPERATOR_EQUALITY | OPERATOR_ARITHMETIC | OPERATOR_WEIGHT | OPERATOR_APPLY | OPERATOR_OTHERS | OPERATOR_COMMA

custom_function ::= prefix_expr
system_function ::= UNARY_FUNCTION | BINARY_FUNCTION | COMPLEX_FUNCTION | INTERNAL_FUNCTION

private arguments_def ::= BRACKET_OPEN arguments_def_body BRACKET_CLOSE {pin(".*")=1}
private arguments_def_body ::= statement* {recoverWhile=brackets_recover}
arguments ::= arguments_def {methods=[expressions="expression"]}
private arguments_list ::= arguments+

var_indexing ::= var_reference arguments_list {pin=2 methods=[variable="var_reference" arguments_group="arguments"]}

fake assignment_type ::= COLON {}
column_assignment_type ::= COLON { extends=assignment_type }
var_assignment_type ::= COLON COLON? { extends=assignment_type }
var_accumulator_type ::= operator_type COLON { extends=assignment_type }

private index_assignment ::= var_indexing var_assignment_type expression { pin = 2 }
private variable_assignment ::= var_declaration (var_assignment_type|var_accumulator_type) operator_type? expression { pin = 2 }
assignment_expr ::= index_assignment | variable_assignment

private expressions_group ::= separator* expression (separator+ expression)* separator*

return_expr ::= COLON expression

signal_expr ::= "'" expression

literal_expr ::= NILL | CHAR | SIGNED_ATOM | UNSIGNED_ATOM | VECTOR | STRING | symbols | symbol

control_expr ::= CONTROL_KEYWORD BRACKET_OPEN cc_body BRACKET_CLOSE { pin = 1 methods=[expressions="expression"] } // if/else/while and so on
condition_expr ::= CONDITION_KEYWORD BRACKET_OPEN cc_body BRACKET_CLOSE { pin=1 methods=[expressions="expression"] } // $[...]
private cc_body ::= statement* { recoverWhile=brackets_recover}

parameter ::= typed_parameter | pattern_parameter {
    implements="org.kdb.inside.brains.psi.impl.QParameterExt"
 }
typed_parameter ::= var_declaration [COLON expression?] {
    extends=parameter
    mixin="org.kdb.inside.brains.psi.impl.QTypedParameterMixin"
 }
pattern_parameter ::= PAREN_OPEN parameter (SEMICOLON parameter)* PAREN_CLOSE {
    extends=parameter
    pin(".*")="SEMICOLON"
    methods = [parameters="parameter"]
    mixin="org.kdb.inside.brains.psi.impl.QPatternParameterMixin"
 }

private parameters_body ::= parameter (SEMICOLON parameter)* {
    pin(".*")="SEMICOLON"
    recoverWhile=brackets_recover
 }
parameters ::= BRACKET_OPEN [parameters_body] BRACKET_CLOSE {
    pin(".*")=1
    methods = [parameters="parameter"]
    implements="org.kdb.inside.brains.psi.impl.QParametersExt"
 }
private lambda_body ::= parameters? expressions? { recoverWhile=braces_recover }
lambda_expr ::= BRACE_OPEN lambda_body BRACE_CLOSE {
    pin=1
    implements="org.kdb.inside.brains.psi.impl.QLambdaExt"
 }

expressions ::= expressions_group

private operator ::= operator_type
private function ::= system_function | custom_function
private operation ::= (iterator_type | operator_type)+

parentheses_expr ::= PAREN_OPEN !BRACKET_OPEN parentheses_body PAREN_CLOSE {pin=2}
private parentheses_body ::= SEMICOLON* (expression SEMICOLON+)* expression? {pin(".*")=2 recoverWhile=parens_recover}

fake invoke_expr ::= (operator | function | parentheses_expr) arguments_list? operation? expression?
invoke_prefix ::= operator arguments_list operation? expression? { pin=2 extends=invoke_expr}
invoke_function ::= function ((arguments_list? ((operation? expression) | operation)) | (arguments_list operation?)) { extends=invoke_expr }
invoke_parentheses ::= parentheses_expr arguments_list? operation? expression? { extends=invoke_expr }
invoke_pattern_match ::= parentheses_expr var_assignment_type expression {extends=invoke_expr}

private invoke_group ::= invoke_prefix | invoke_function | invoke_pattern_match | invoke_parentheses

type_cast_expr ::= TYPE_CAST_PATTERN expression? {pin = 1 methods=[typeCast="TYPE_CAST_PATTERN"]}

table_column ::= (var_declaration column_assignment_type expression?) | expression {pin(".*")=2}
private table_columns_group ::= table_column (SEMICOLON+ table_column)* SEMICOLON* {
//    pin(".*")="SEMICOLON"
    recoverWhile=table_columns_recover
 }
private table_columns_recover ::= !(PAREN_CLOSE | BRACKET_CLOSE)
fake table_columns ::= table_columns_group { methods=[columns="table_column"] }
table_keys ::= BRACKET_OPEN [table_columns_group] BRACKET_CLOSE {
    pin=1 extends=table_columns methods=[table_column]
 }
table_values ::= [table_columns_group] { extends=table_columns }

private table_dict_start ::= PAREN_OPEN  table_keys
table_expr ::= table_dict_start SEMICOLON* table_values PAREN_CLOSE {
    pin=2 methods=[table_columns keys="table_columns[0]" values="table_columns[1]"]
}

dict_expr ::= table_dict_start PAREN_CLOSE

query_column ::= (var_declaration column_assignment_type expression) | expression {pin(".*")=2}
query_columns ::= query_column (QUERY_SPLITTER query_column)* {pin(".*")="QUERY_SPLITTER"}
private query_values ::= query_columns {recoverWhile=query_values_recover}
private query_values_recover ::= !(QUERY_BY | QUERY_FROM)
private query_groups ::= query_columns {recoverWhile=query_groups_recover}
private query_groups_recover ::= !QUERY_FROM
query_expr ::= QUERY_TYPE query_values? [QUERY_BY query_groups] [QUERY_FROM expression [QUERY_WHERE expression]] {
  pin(".*") = 1
  methods=[query_columns expression source="expression[0]" filter="expression[1]" columns="query_columns[0]"  keys="query_columns[1]"]
 }

grouping_expr ::= BRACKET_OPEN grouping_expr_body? BRACKET_CLOSE
private grouping_expr_body ::= expressions_group {recoverWhile=brackets_recover}

k_syntax_expr ::= operation+ expression

projection_expr ::= (operator_type | iterator_type | OPERATOR_ARITHMETIC | SYMBOL_PATH_PATTERN | COLON | OPERATOR_COMMA | literal_expr)+ | system_function | FUNCTION_IMPORT

// Only these expressions can be used as a left arguments of invokes
prefix_expr ::=
    dict_expr
    | table_expr
    | literal_expr
    | lambda_expr
    | control_expr
    | condition_expr
    | grouping_expr
    | var_reference
    { elementType=expression}

expression ::= assignment_expr
    | type_cast_expr
    | query_expr
    | import_function
    | invoke_group
    | prefix_expr
    | return_expr
    | signal_expr
    | k_syntax_expr
    | projection_expr
    { extraRoot=true }