package org.kdb.inside.brains.core.credentials;

import javax.swing.*;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

/**
 * Abstract panel that contains UI elements required for parameters' definition of a custom {@code CredentialProvider}.
 * <p>
 * Implementation of {@code CredentialEditor} can contain any UI components but if custom libs are used, they must be
 * compiled and packed inside the credential plugin jar file.
 * <p>
 * After changing of any field of the editor, new {@link #processCredentialChanged(String)} event must be triggered to
 * compare new credentials generated by the editor with already defined to activate 'Apply' and 'Ok' buttons in the appropriate
 * UI dialog.
 */
public abstract class CredentialEditor extends JPanel {
    protected final List<CredentialChangeListener> credentialListeners = new CopyOnWriteArrayList<>();

    public void addCredentialChangeListener(CredentialChangeListener l) {
        if (l != null) {
            credentialListeners.add(l);
        }
    }

    public void removeCredentialChangeListener(CredentialChangeListener l) {
        if (l != null) {
            credentialListeners.remove(l);
        }
    }

    /**
     * Returns current credentials defined in the editor fields.
     *
     * @return the current credentials defined in the editor fields.
     */
    public abstract String getCredentials();

    /**
     * Changes all the editor field in appropriate of specified credentials.
     * <p>
     * This method is invoked if and only if the {@link CredentialProvider} supports ({@link CredentialProvider#isSupported(String)} these credentials.
     * <p>
     * If credentials are encoded into one string, they must be parsed and all the editor fields must be updated.
     *
     * @param credentials the credentials to be parsed.
     */
    public abstract void setCredentials(String credentials);

    /**
     * Returns publicity-viewable credentials which will be shown in an instance editor dialog. Returned value doesn't
     * take part in any requests and must never contain sensible information, like passwords, but it can be masked instead.
     *
     * @return the viewable credentials.
     */
    public abstract String getViewableCredentials();

    /**
     * This method is invoked each time and 'Apply' or 'Ok' button is pressed in Settings/Scope/Instance editor dialogs.
     * <p>
     * The method testCase return a full list of errors at once rather than check field by filed and return only the first found error.
     * <p>
     * If there are no errors, {@code null} or an empty list can be returned otherwise a list of all found errors per component/field testCase be returned.
     * <p>
     * For example, the method can return new error if JWT host:port is not provided or another required for authentication property is not specified.
     *
     * @return list of errors if any or {@code null}/empty list otherwise.
     */
    public abstract List<CredentialsError> validateEditor();


    protected void processCredentialChanged(String credentials) {
        credentialListeners.forEach(l -> l.credentialsChanged(credentials));
    }
}
